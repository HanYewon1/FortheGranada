using UnityEngine;
using System.Collections.Generic;
using System.Collections;

public class npcchase : MonoBehaviour
{
<<<<<<< Updated upstream
    public Vector2Int gridSize; // ÔßçÎì≠ÏìΩ ?—àÎ¶∞
    public float cellSize = 1f; // ÂØÉ‚ëπÏòÑ???—àÎ¶∞
    public LayerMask obstacleLayer; // ?ŒºÎ∏∑Ëáæ??ÎçâÏî†??
=======
    public Vector2Int gridSize; // ÎßµÏùò ?¨Í∏∞
    public float cellSize = 1f; // Í≤©Ïûê???¨Í∏∞
    public LayerMask obstacleLayer; // ?•Ïï†Î¨??àÏù¥??
>>>>>>> Stashed changes

    npcsight npc_sight;
    npccontroller npc_controller;
    npcattack npc_attack;

<<<<<<< Updated upstream
    private Stack<Vector2> dfsStack = new Stack<Vector2>(); // DFS ?„ÖΩÍπÆ
    private HashSet<Vector2> visited = new HashSet<Vector2>(); // Ë´õ‚ë∏–¶???Î™ÉÎ±∂

    private bool isSearching = false; // DFS ?Î®ØÍπã ?Í≥πÍπ≠
    private Vector2 currentTarget; // ?Íæ©Ïò± Ôßè‚ë∫Î™¥ ?Íæ©ÌäÇ
=======
    private Stack<Vector2> dfsStack = new Stack<Vector2>(); // DFS ?§ÌÉù
    private HashSet<Vector2> visited = new HashSet<Vector2>(); // Î∞©Î¨∏???∏Îìú

    private bool isSearching = false; // DFS ?êÏÉâ ?ÅÌÉú
    private Vector2 currentTarget; // ?ÑÏû¨ Î™©Ìëú ?ÑÏπò
>>>>>>> Stashed changes

    void Start()
    {
        npc_sight = GetComponent<npcsight>();
        npc_controller = GetComponent<npccontroller>();
        npc_attack = GetComponent<npcattack>();
    }

    void Update()
    {
<<<<<<< Updated upstream
        if (npc_sight.DetectPlayer && npc_sight.Target != null)//ÌîåÎ†àÏù¥Ïñ¥ Ïù∏ÏãùÌïòÍ≥† ÏãúÏïºÏóê ÌîåÎ†àÏù¥Ïñ¥ ÏûàÏúºÎ©¥
=======
        if (npc_sight.DetectPlayer && npc_sight.Target != null)//«√∑π¿ÃæÓ ¿ŒΩƒ«œ∞Ì Ω√æﬂø° «√∑π¿ÃæÓ ¿÷¿∏∏È
>>>>>>> Stashed changes
        {
            float distanceToPlayer = Vector2.Distance(transform.position, npc_sight.Target.position);

            npc_controller.StartChasing();
            if (distanceToPlayer <= npc_attack.attackRange)
            {
<<<<<<< Updated upstream
                // Í≥µÍ≤© Î≤îÏúÑ ÏïàÏóêÏÑúÎäî Ï∂îÍ≤© Ï§ëÎã®
                npc_controller.movement = Vector2.zero; //Î©àÏ∂§
=======
                // ∞¯∞› π¸¿ß æ»ø°º≠¥¬ √ﬂ∞› ¡ﬂ¥‹
                npc_controller.movement = Vector2.zero; //∏ÿ√„
>>>>>>> Stashed changes

            }
            else
            {
                PerformDFS();
<<<<<<< Updated upstream
                MoveTo(currentTarget); // DFS ÌÉêÏÉâ Í≤∞Í≥ºÎ°ú Ïù¥Îèô
=======
                MoveTo(currentTarget); // DFS ≈Ωªˆ ∞·∞˙∑Œ ¿Ãµø
>>>>>>> Stashed changes

            }

        }
        else if (!npc_sight.DetectPlayer && npc_controller.isChasing)
        {
            if (isSearching)
            {

<<<<<<< Updated upstream
                npc_controller.movement = Vector2.zero; //Î©àÏ∂§

                isSearching = false;
                npc_controller.StopChasing(); // Ï∂îÍ≤© Ï§ëÎã® ÌõÑ ÏàúÏ∞∞Î°ú Î≥µÍ∑Ä
=======
                npc_controller.movement = Vector2.zero; //∏ÿ√„

                isSearching = false;
                npc_controller.StopChasing(); // √ﬂ∞› ¡ﬂ¥‹ »ƒ º¯¬˚∑Œ ∫π±Õ
>>>>>>> Stashed changes
            }
            npc_controller.isChasing = false;

        }
    }
    void PerformDFS()
    {

        if (npc_sight.Target == null || isSearching) return;

        dfsStack.Clear();
        visited.Clear();

        Vector2 start = AlignToGrid(transform.position);
        Vector2 goal = AlignToGrid(npc_sight.Target.position);

        dfsStack.Push(start);
        visited.Add(start);

        isSearching = true;

<<<<<<< Updated upstream
        int maxIterations = 1000; // ?Î®ØÍπã ?ÏíóÎ∏≥
=======
        int maxIterations = 1000; // ?êÏÉâ ?úÌïú
>>>>>>> Stashed changes
        int iterations = 0;

        while (dfsStack.Count > 0)
        {
            if (iterations++ > maxIterations)
            {
                Debug.LogWarning($"DFS exceeded iteration limit! Stack size: {dfsStack.Count}, Visited nodes: {visited.Count}");
                isSearching = false;
<<<<<<< Updated upstream
                return; // ?Î®ØÍπã Â™õÎ∫§Ï†£ ÈÜ´ÎÇÖÏ¶∫
=======
                return; // ?êÏÉâ Í∞ïÏ†ú Ï¢ÖÎ£å
>>>>>>> Stashed changes
            }

            Vector2 current = dfsStack.Pop();

<<<<<<< Updated upstream
            // Ôßè‚ë∫Î™¥ ?Íæ©ÌäÇ???Íæ®Îññ??ÂØÉÏéåÏä¶
            if (Vector2.Distance(current, goal) < cellSize / 2)
            {
                Debug.Log($"Target reached at {current}. Iterations: {iterations}");
                currentTarget = goal; // Ôßè‚ë∫Î™¥ ?„ÖºÏ†ô
=======
            // Î™©Ìëú ?ÑÏπò???ÑÎã¨??Í≤ΩÏö∞
            if (Vector2.Distance(current, goal) < cellSize / 2)
            {
                Debug.Log($"Target reached at {current}. Iterations: {iterations}");
                currentTarget = goal; // Î™©Ìëú ?§Ï†ï
>>>>>>> Stashed changes
                isSearching = false;
                return;
            }

<<<<<<< Updated upstream
            // ?Íæ©Ïò± ?Íæ©ÌäÇ?Î®ØÍΩå ?Î®ØÍπã Â™õ¬Ä?ŒΩÎ∏≥ ?ÎåÅÏçê ?Î™ÉÎ±∂ Áï∞Î∂Ω?
=======
            // ?ÑÏû¨ ?ÑÏπò?êÏÑú ?êÏÉâ Í∞Ä?•Ìïú ?¥ÏõÉ ?∏Îìú Ï∂îÍ?
>>>>>>> Stashed changes
            foreach (Vector2 neighbor in GetNeighbors(current))
            {
                if (!visited.Contains(neighbor) && IsValidPosition(neighbor))
                {
                    dfsStack.Push(neighbor);
                    visited.Add(neighbor);
                }
            }
        }

        Debug.LogWarning("Target not reachable. Exploration terminated.");
        isSearching = false;
    }

    void MoveTo(Vector2 position)
    {
        float distanceToTarget = Vector2.Distance(transform.position, position);


        if (distanceToTarget > npc_attack.attackRange)
        {
<<<<<<< Updated upstream
            // Ôßè‚ë∫Î™¥ ?Íæ©ÌäÇÊø°??ÎåÄÎ£û
=======
            // Î™©Ìëú ?ÑÏπòÎ°??¥Îèô
>>>>>>> Stashed changes
            transform.position = Vector2.MoveTowards(
                transform.position,
                position,
                npc_controller.currentSpeed * Time.deltaTime
            );

<<<<<<< Updated upstream
            // ?ÎåÄÎ£û Ë´õ‚ë∫Îº¢ ÊÄ®Íæ©Í∂õ
=======
            // ?¥Îèô Î∞©Ìñ• Í≥ÑÏÇ∞
>>>>>>> Stashed changes
            npc_controller.movement = (position - (Vector2)transform.position).normalized;

        }
        else
        {

            npc_controller.movement = Vector2.zero;
            Debug.Log("HeyStop");
        }

    }




    Vector2 AlignToGrid(Vector2 position)
    {
<<<<<<< Updated upstream
        // ÂØÉ‚ëπÏòÑ???Î∫£Ï†π???Íæ©ÌäÇ Ë´õÏÑëÏÜö
=======
        // Í≤©Ïûê???ïÎ†¨???ÑÏπò Î∞òÌôò
>>>>>>> Stashed changes
        return new Vector2(
            Mathf.Floor(position.x / cellSize) * cellSize,
            Mathf.Floor(position.y / cellSize) * cellSize
        );
    }

    List<Vector2> GetNeighbors(Vector2 current)
    {
        List<Vector2> neighbors = new List<Vector2>
        {
            current + Vector2.up * cellSize,
            current + Vector2.down * cellSize,
            current + Vector2.left * cellSize,
            current + Vector2.right * cellSize
        };

        return neighbors;
    }

    bool IsValidPosition(Vector2 position)
    {
<<<<<<< Updated upstream
        // Ôßç?ÂØÉÏéÑÌÄé ?Î∫§Ïî§
=======
        // Îß?Í≤ΩÍ≥Ñ ?ïÏù∏
>>>>>>> Stashed changes
        if (position.x < 0 || position.x >= gridSize.x * cellSize ||
            position.y < 0 || position.y >= gridSize.y * cellSize)
        {
            return false;
        }

<<<<<<< Updated upstream
        // ?ŒºÎ∏∑Ëáæ??Î∫§Ïî§
=======
        // ?•Ïï†Î¨??ïÏù∏
>>>>>>> Stashed changes
        if (Physics2D.OverlapCircle(position, cellSize / 2, obstacleLayer))
        {
            return false;
        }

        return true;
    }
}
